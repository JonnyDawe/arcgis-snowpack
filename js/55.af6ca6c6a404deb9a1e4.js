(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{422:function(e,t,i){"use strict";i.r(t);i(18),i(87),i(25),i(163);var r=i(0),n=(i(1),i(3)),s=i(47),a=i(103),o=i(23),l=i(407),c=i(51),u=i(108),f=i(105),h=i(110),d=i(107),p=i(114),m=i(32),y=i(73),b=i(380),g=i(53),x=i(349),O=i(375),w=i(393),v=i(361),I=i(351);i(6),i(13),i(16),i(70),i(10),i(72),i(5),i(21),i(4),i(62),i(26),i(24),i(85),i(48),i(20),i(9),i(52),i(109),i(106),i(374),i(66),i(31),i(118),i(71),i(82),i(84),i(310),i(368),i(350),i(86),i(8),i(137),i(111);const j=r.n.getLogger("esri.layers.mixins.ImageryTileMixin"),T=e=>{let t=class extends e{constructor(){super(...arguments),this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this.bandIds=null,this.copyright=null,this.fullExtent=null,this.interpolation="nearest",this.raster=null,this.rasterInfo=null,this.sourceJSON=null,this.spatialReference=null,this.tileInfo=null,this.symbolizer=null}set multidimensionalDefinition(e){this.raster&&(this._sliceId=this.raster.getSliceIndex(e)),this._set("multidimensionalDefinition",e)}set url(e){this._set("url",Object(m.j)(e,j))}set renderer(e){this._set("renderer",e),this.updateRenderer()}async updateRenderer(){if(!this.loaded)return;if(JSON.stringify(this._cachedRendererJson)===JSON.stringify(this.renderer))return;const e=this._rasterJobHandler.instance;e&&(this.symbolizer.rendererJSON=Object(l.a)(this.renderer.toJSON()),this.symbolizer.bind(),await e.updateSymbolizer(this.symbolizer),this._cachedRendererJson=this.renderer.toJSON())}async applyRenderer(e,t){const i=e&&e.pixelBlock;if(!(i&&i.pixels&&i.pixels.length>0))return null;let r;this.updateRenderer();const n=this._rasterJobHandler.instance,{bandIds:s}=this;return r=n?await n.symbolize({...e,simpleStretchParams:t,bandIds:s}):this.symbolizer.symbolize({...e,simpleStretchParams:t,bandIds:s}),r}getTileUrl(e,t,i){return"RasterTileServer"===this.raster.datasetFormat?`${this.url}/tile/${e}/${t}/${i}`:""}getCompatibleTileInfo(e,t){if(!this.loaded)return null;const i=Object(r.aq)(e);return y.b.create({size:256,spatialReference:e,origin:i?{x:i.origin[0],y:i.origin[1]}:{x:t.xmin,y:t.ymax}})}getCompatibleFullExtent(e){return this.loaded?(this._compatibleFullExtent&&this._compatibleFullExtent.spatialReference.equals(e)||(this._compatibleFullExtent=this.raster.computeExtent(e)),this._compatibleFullExtent):null}async fetchTile(e,t,i,n={}){if(n.requestAsImageElement){const s=this.getTileUrl(e,t,i);return Object(r.C)(s,{responseType:"image",query:{sliceId:this._sliceId,_ts:n.timestamp},signal:n.signal}).then((e=>e.data))}await this._initJobHandler();const s="raster-shaded-relief"===this.renderer.type?{cols:1,rows:1}:null;if(this.multidimensionalDefinition){const e=this._sliceId;n={multidimensionalDefinition:this.multidimensionalDefinition,sliceId:e,buffer:s,...n}}return this.raster.fetchTile(e,t,i,n)}async fetchPixels(e,t,i,r){if(await this._initJobHandler(),this.multidimensionalDefinition){const e=this._sliceId;r={multidimensionalDefinition:this.multidimensionalDefinition,sliceId:e,...r}}return this.raster.fetchPixels(e,t,i,r)}identify(e,t={}){return this.multidimensionalDefinition&&!t.multidimensionalDefinition&&(t={...t,multidimensionalDefinition:this.multidimensionalDefinition}),this.raster.identify(e,t)}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}_configDefaultSettings(){this._configDefaultInterpolation(),this._configDefaultSlice(),this._configDefaultRenderer()}_initJobHandler(){if(null!=this._rasterJobHandler.connectionPromise)return this._rasterJobHandler.connectionPromise;const e=new l.e;return this._rasterJobHandler.connectionPromise=e.initialize().then((()=>{this._rasterJobHandler.instance=e,this.raster.rasterJobHandler=e,this.renderer&&this.updateRenderer()})).catch((()=>null)),this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this.raster.rasterJobHandler=null}_configDefaultInterpolation(){if(null==this.interpolation){var e;const t=Object(l.b)(this.rasterInfo,this.raster.tileType,null==(e=this.sourceJSON)?void 0:e.defaultResamplingMethod);this._set("interpolation",t)}}_configDefaultSlice(){const{multidimensionalInfo:e}=this.raster.rasterInfo;if(Object(r.P)(e)){if(!this.multidimensionalDefinition){const t=e.variables[0],i=[];t.dimensions.forEach((e=>{i.push(new l.d({variableName:t.name,dimensionName:e.name,values:e.hasRegularIntervals?e.extent[0]:e.values[0],isSlice:!0}))})),this.multidimensionalDefinition=i}this._sliceId=this.raster.getSliceIndex(this.multidimensionalDefinition)}}_configDefaultRenderer(){const e=this.raster.rasterInfo;var t,i;this.bandIds||(this.bandIds=Object(l.c)(e)),this.renderer||(this.renderer=Object(l.h)(e,{bandIds:this.bandIds,variableName:null==(t=this.multidimensionalDefinition)||null==(i=t[0])?void 0:i.variableName})),this.symbolizer?(this.symbolizer.rendererJSON=Object(l.a)(this.renderer.toJSON()),this.symbolizer.rasterInfo=e):this.symbolizer=new b.c({rendererJSON:this.renderer.toJSON(),rasterInfo:e}),this.symbolizer.bind()||j.warn("imagery-tile-mixin","The given renderer is not supported by the layer.")}};return Object(r.e)([Object(r.y)()],t.prototype,"_cachedRendererJson",void 0),Object(r.e)([Object(r.y)()],t.prototype,"_sliceId",void 0),Object(r.e)([Object(r.y)()],t.prototype,"_compatibleFullExtent",void 0),Object(r.e)([Object(r.y)()],t.prototype,"_rasterJobHandler",void 0),Object(r.e)([Object(r.y)()],t.prototype,"bandIds",void 0),Object(r.e)([Object(r.y)()],t.prototype,"copyright",void 0),Object(r.e)([Object(r.y)({type:r.M}),Object(n.l)("rasterInfo.extent")],t.prototype,"fullExtent",void 0),Object(r.e)([Object(r.y)()],t.prototype,"interpolation",void 0),Object(r.e)([Object(r.y)()],t.prototype,"ioConfig",void 0),Object(r.e)([Object(r.y)({type:[l.d]})],t.prototype,"multidimensionalDefinition",null),Object(r.e)([Object(r.y)()],t.prototype,"raster",void 0),Object(r.e)([Object(r.y)({readOnly:!0}),Object(n.l)("raster.rasterInfo")],t.prototype,"rasterInfo",void 0),Object(r.e)([Object(r.y)()],t.prototype,"sourceJSON",void 0),Object(r.e)([Object(r.y)({type:r.A}),Object(n.l)("rasterInfo.spatialReference")],t.prototype,"spatialReference",void 0),Object(r.e)([Object(r.y)({type:y.b}),Object(n.l)("rasterInfo.storageInfo.tileInfo")],t.prototype,"tileInfo",void 0),Object(r.e)([Object(r.y)(o.f)],t.prototype,"url",null),Object(r.e)([Object(r.y)({types:l.f})],t.prototype,"renderer",null),Object(r.e)([Object(r.y)()],t.prototype,"symbolizer",void 0),t=Object(r.e)([Object(r.i)("esri.layers.ImageryTileMixin")],t),t};let S=class extends r.a{constructor(){super(...arguments),this.blockWidth=void 0,this.blockHeight=void 0,this.compression=null,this.origin=null,this.firstPyramidLevel=null,this.maximumPyramidLevel=null,this.pyramidScalingFactor=2,this.pyramidBlockWidth=null,this.pyramidBlockHeight=null,this.isVirtualTileInfo=!1,this.tileInfo=null,this.blockBoundary=null}};Object(r.e)([Object(r.y)({type:Number,json:{write:!0}})],S.prototype,"blockWidth",void 0),Object(r.e)([Object(r.y)({type:Number,json:{write:!0}})],S.prototype,"blockHeight",void 0),Object(r.e)([Object(r.y)({type:String,json:{write:!0}})],S.prototype,"compression",void 0),Object(r.e)([Object(r.y)({type:r._,json:{write:!0}})],S.prototype,"origin",void 0),Object(r.e)([Object(r.y)({type:Number,json:{write:!0}})],S.prototype,"firstPyramidLevel",void 0),Object(r.e)([Object(r.y)({type:Number,json:{write:!0}})],S.prototype,"maximumPyramidLevel",void 0),Object(r.e)([Object(r.y)()],S.prototype,"pyramidScalingFactor",void 0),Object(r.e)([Object(r.y)({type:Number,json:{write:!0}})],S.prototype,"pyramidBlockWidth",void 0),Object(r.e)([Object(r.y)({type:Number,json:{write:!0}})],S.prototype,"pyramidBlockHeight",void 0),Object(r.e)([Object(r.y)({type:Boolean,json:{write:!0}})],S.prototype,"isVirtualTileInfo",void 0),Object(r.e)([Object(r.y)({json:{write:!0}})],S.prototype,"tileInfo",void 0),Object(r.e)([Object(r.y)()],S.prototype,"blockBoundary",void 0),S=Object(r.e)([Object(r.i)("esri.layers.support.RasterStorageInfo")],S);var R=S;let C=class extends(Object(r.aj)(r.a)){constructor(){super(...arguments),this.rasterJobHandler=null,this.datasetName=null,this.datasetFormat=null,this.rasterInfo=null,this.ioConfig={sampling:"closest"}}async init(){const e=Object(O.f)();this.addResolvingPromise(e),await this.when()}normalizeCtorArgs(e){return e&&e.ioConfig&&(e={...e,ioConfig:{resolution:null,bandIds:null,sampling:"closest",tileInfo:y.b.create(),...e.ioConfig}}),e}set url(e){this._set("url",Object(m.j)(e,r.n.getLogger(this.declaredClass)))}async open(e){throw new r.s("BaseRaster:open-not-implemented","open() is not implemented")}async fetchTile(e,t,i,n={}){var s;const{tileInfo:a}=n,o=a.lodAt(e),l=this.getTileExtent({x:o.resolution,y:o.resolution},t,i,a.origin,a.spatialReference,a.size);return null!=(s=n.multidimensionalDefinition)&&s.length&&Object(r.P)(this.rasterInfo.multidimensionalInfo)&&null==n.sliceId&&(n={...n,sliceId:this.getSliceIndex(n.multidimensionalDefinition)||0}),this.fetchPixels(l,a.size[0],a.size[1],n)}async identify(e,t={}){const{spatialReference:i,extent:n}=this.rasterInfo,{datumTransformation:s}=t;let a=Object(O.d)(e,i,s);if(!n.intersects(a))return{location:a,value:null};if(Object(r.P)(this.rasterInfo.transform)){const e=this.rasterInfo.transform.inverseTransform(a);if(!this.rasterInfo.nativeExtent.intersects(e))return{location:e,value:null};a=e}let o=0;if(t.srcResolution)o=Object(O.g)(t.srcResolution,this.rasterInfo,this.ioConfig.sampling).pyramidLevel;else if(o=await this.computeBestPyramidLevelForLocation(e,t),null==o)return{location:a,value:null};const l=this.identifyPixelLocation(a,o,null);if(null===l)return{location:a,value:null};const{row:c,col:u,rowOffset:f,colOffset:h}=l,d=Object(w.d)(this.url,t.sliceId),p=`${o}/${c}/${u}`;let m=Object(w.e)(d,null,p);Object(r.P)(m)||(m=this.fetchRawTile(o,c,u,t),Object(w.h)(d,null,p,m));const y=await m;if(!(y&&y.pixels&&y.pixels.length>0))return{location:a,value:null};const b=f*this.rasterInfo.storageInfo.blockHeight+h;return{location:a,value:!y.mask||y.mask[b]?y.pixels.map((e=>e[b])):null,pyramidLevel:o}}async fetchPixels(e,t,i,n={}){const s=e.clone().normalize();e=s[0];const a=this.rasterInfo.spatialReference,o=!e.spatialReference.equals(a),{datumTransformation:l}=n,c=new r._({x:(e.xmax-e.xmin)/t,y:(e.ymax-e.ymin)/i,spatialReference:e.spatialReference}),u=n.srcResolution||(o?Object(O.a)(c,a,e,l):c);if(!u)return null;const{pyramidLevel:f,pyramidResolution:h,excessiveReading:d}=Object(O.g)(u,this.rasterInfo,this.ioConfig.sampling);if(d)return null;const p=this.rasterInfo.storageInfo;let m=o?Object(O.e)(e,a,l):e;const y=Object(r.Y)(this.rasterInfo.transform);if(y&&(m=y.inverseTransform(m)),null==m)return null;const b={x:Math.floor((m.xmin-p.origin.x)/h.x+.1),y:Math.floor((p.origin.y-m.ymax)/h.y+.1)},g=Math.ceil((m.xmax-m.xmin)/h.x-.1),w=Math.ceil((m.ymax-m.ymin)/h.y-.1);if(g/t>8||w/i>8)return null;const v=await this.fetchRawPixels(f,b,{width:g,height:w},n);if(!v)return null;const I=f>0?p.pyramidBlockWidth:p.blockWidth,j=f>0?p.pyramidBlockHeight:p.blockHeight;if(!o&&1===v.pixelBlocks.length&&I===t&&j===i&&u.x===c.x&&u.y===c.y)return{extent:e,srcExtent:m,pixelBlock:v.pixelBlocks[0]};const T=Object(O.b)(e,v.extent,c,l,y);let S;const R=!n.requestRawData,C={rows:T.spacing[0],cols:T.spacing[1]},{pixelBlocks:_,mosaicSize:M,isPartiallyFilled:k}=v;if(this.rasterJobHandler)S=await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:_,srcMosaicSize:M,destDimension:R?{width:t,height:i}:null,coefs:R?T.coefficients:null,sampleSpacing:R?C:null,interpolation:n.interpolation},n);else{const e=Object(x.m)(_,M);S=R?Object(x.a)(e,{width:t,height:i},T.coefficients,C,n.interpolation):e}return n.requestRawData?{srcExtent:m,pixelBlock:S,transformGrid:T,extent:e,isPartiallyFilled:k}:{srcExtent:m,extent:e,pixelBlock:S}}async fetchRawPixels(e,t,i,n){const{origin:s,blockBoundary:a}=this.rasterInfo.storageInfo,{blockWidth:o,blockHeight:l}=this.getBlockWidthHeight(e);let{x:c,y:u}=t,{width:f,height:h}=i;n.buffer&&(c-=n.buffer.cols,u-=n.buffer.rows,f+=2*n.buffer.cols,h+=2*n.buffer.rows);const d=Math.floor(c/o),p=Math.floor(u/l),m=Math.floor((c+f-1)/o),y=Math.floor((u+h-1)/l),b=a[e];if(!b)return null;const{minRow:g,minCol:x,maxCol:O,maxRow:w}=b;if(y<g||m<x||p>w||d>O)return null;const v=[];let I,j=!1;for(let t=p;t<=y;t++)for(let i=d;i<=m;i++)t>=g&&i>=x&&w>=t&&O>=i?(I=this._fetchRawTile(e,t,i,n),this.ioConfig.allowPartialFill&&(I=new Promise((e=>{I.then((t=>e(t))).catch((()=>{j=!0,e(null)}))}))),v.push(I)):v.push(null);if(0===v.length)return null;const T=await Promise.all(v),S={height:(y-p+1)*o,width:(m-d+1)*l},{nativePixelSize:R,spatialReference:C}=this.rasterInfo,_=R.x*2**e,M=R.y*2**e;return{extent:new r.M({xmin:s.x+d*o*_,xmax:s.x+(m+1)*o*_,ymin:s.y-(y+1)*l*M,ymax:s.y-p*l*M,spatialReference:C}),pixelBlocks:T,mosaicSize:S,isPartiallyFilled:j}}async fetchRawTile(e,t,i,n){throw new r.s("BaseRaster:read-not-implemented","fetchRawTile() is not implemented")}computeExtent(e){return Object(O.e)(this.rasterInfo.extent,e)}decodePixelBlock(e,t){return!this.rasterJobHandler||t.useCanvas?Object(b.d)(e,t):this.rasterJobHandler.decode({data:e,options:t})}async request(e,t,i){var n,s;const{customFetchParameters:a}=this.ioConfig,{range:o,query:l,headers:c}=t;i=null!=(n=null!=(s=i)?s:t.retryCount)?n:this.ioConfig.retryCount;const u=o?{Range:`bytes=${o.from}-${o.to}`}:null;try{return await Object(r.C)(e,{...t,query:{...l,...a},headers:{...c,...u}})}catch(r){if(i>0)return i--,this.request(e,t,i);throw r}}getSliceIndex(e){const{multidimensionalInfo:t}=this.rasterInfo;if(!Object(r.P)(t)||null==e||!e.length)return null;let i=0;const n=e[0].variableName;for(let r=0;r<t.variables.length;r++){const s=t.variables[r],a=s.dimensions;if(s.name!==n){i+=a.map((e=>this._getDimensionValuesCount(e))).reduce(((e,t)=>e+t));break}const o=a.map((e=>this._getDimensionValuesCount(e))),l=a.length;for(let t=0;t<l;t++){const r=e.filter((e=>e.dimensionName===a[t].name))[0];if(null==r)return null;const n=Array.isArray(r.values[0])?r.values[0][0]:r.values[0],s=this._getIndexFromDimensions(n,a[t]);if(-1===s)return null;o.shift(),i+=t===l-1?s:s*o.reduce(((e,t)=>e+t))}}return i}updateTileInfo(){const{storageInfo:e,spatialReference:t,extent:i,pixelSize:n}=this.rasterInfo;if(!e.tileInfo){const s=[],a=e.maximumPyramidLevel||0;let o=Math.max(n.x,n.y),l=1/.0254*96*o;for(let e=0;e<=a;e++)s.push({level:a-e,resolution:o,scale:l}),o*=2,l*=2;const c=new r._({x:i.xmin,y:i.ymax,spatialReference:t});e.tileInfo=new y.b({origin:c,size:[e.blockWidth,e.blockHeight],spatialReference:t,lods:s}),e.isVirtualTileInfo=!0}}createRemoteDatasetStorageInfo(e,t=512,i=512,n){const{width:s,height:a,nativeExtent:o,pixelSize:l,spatialReference:c}=e,u=new r._({x:o.xmin,y:o.ymax,spatialReference:c});null==n&&(n=Math.max(0,Math.round(Math.log(Math.max(s,a))/Math.LN2-8)));const f=this._computeBlockBoundary(o,l,n,512,512);e.storageInfo=new R({blockWidth:t,blockHeight:i,pyramidBlockWidth:t,pyramidBlockHeight:i,origin:u,firstPyramidLevel:1,maximumPyramidLevel:n,blockBoundary:f})}async computeBestPyramidLevelForLocation(e,t={}){return 0}identifyPixelLocation(e,t,i){const{spatialReference:r,nativePixelSize:n,nativeExtent:s}=this.rasterInfo,{blockWidth:a,blockHeight:o,maximumPyramidLevel:l,pyramidScalingFactor:c,origin:u}=this.rasterInfo.storageInfo,f=Object(O.d)(e,r,i);if(!s.intersects(f))return null;if(t<0||t>l)return null;const h=c**t,d=h*n.x,p=h*n.y,m=(u.y-f.y)/p/o,y=(f.x-u.x)/d/a,b=Math.min(o-1,Math.floor((m-Math.floor(m))*o)),g=Math.min(a-1,Math.floor((y-Math.floor(y))*a));return{pyramidLevel:t,row:Math.floor(m),col:Math.floor(y),rowOffset:b,colOffset:g,srcLocation:f}}getTileExtent(e,t,i,n,s,a){const[o,l]=a,c=n.x+i*o*e.x,u=c+o*e.x,f=n.y-t*l*e.y,h=f-l*e.y;return new r.M({xmin:c,xmax:u,ymin:h,ymax:f,spatialReference:s})}getBlockWidthHeight(e){return{blockWidth:e>0?this.rasterInfo.storageInfo.pyramidBlockWidth:this.rasterInfo.storageInfo.blockWidth,blockHeight:e>0?this.rasterInfo.storageInfo.pyramidBlockHeight:this.rasterInfo.storageInfo.blockHeight}}isBlockOutside(e,t,i){const r=this.rasterInfo.storageInfo.blockBoundary[e];return!r||r.maxRow<t||r.maxCol<i||r.minRow>t||r.minCol>i}_computeBlockBoundary(e,t,i,r,n){let{x:s,y:a}=t;const o=e.xmin,l=e.ymax,c=[{minCol:Math.floor((e.xmin-o+.1*s)/r/s),maxCol:Math.floor((e.xmax-o-.1*s)/r/s),minRow:Math.floor((l-e.ymax+.1*a)/n/a),maxRow:Math.floor((l-e.ymin-.1*a)/n/a)}];if(i>0)for(let t=0;t<i;t++)s*=2,a*=2,c.push({minCol:Math.floor((e.xmin-o+.1*s)/r/s),maxCol:Math.floor((e.xmax-o-.1*s)/r/s),minRow:Math.floor((l-e.ymax+.1*a)/n/s),maxRow:Math.floor((l-e.ymin-.1*a)/n/s)});return c}_fetchRawTile(e,t,i,n){const s=this.rasterInfo.storageInfo.blockBoundary[e];if(!s)return Promise.resolve(null);const{minRow:a,minCol:o,maxCol:l,maxRow:c}=s;if(t<a||i<o||t>c||i>l)return Promise.resolve(null);const u=Object(w.d)(this.url,n.sliceId),f=`${e}/${t}/${i}`;let h=Object(w.e)(u,n.registryId,f);if(!Object(r.P)(h)){const s=Object(r.V)();h=this.fetchRawTile(e,t,i,{...n,signal:s.signal}),Object(w.h)(u,n.registryId,f,h,s),h.catch((()=>{Object(w.a)(u,n.registryId,f)}))}return n.signal&&Object(r.a8)(n,(()=>{Object(w.c)(u,n.registryId,f)})),h}_getIndexFromDimensions(e,t){const{extent:i,interval:r,unit:n,values:s}=t;if(null!=s&&s.length)return Array.isArray(s[0])?s.findIndex((t=>t[0]<=e&&t[1]>=e)):s.indexOf(e);if(e>i[1])return-1;const a=i[0];let o=-1;if("ISO8601"===n){var l;switch((null==(l=t.intervalUnit)?void 0:l.toLowerCase())||"seconds"){case"seconds":o=Math.round((e-a)/1e3/r);break;case"minutes":o=Math.round((e-a)/6e4/r);break;case"hours":o=Math.round((e-a)/36e5/r);break;case"days":o=Math.round((e-a)/864e5/r);break;case"years":o=Math.round((new Date(e).getUTCFullYear()-new Date(a).getUTCFullYear())/r);break;case"decades":o=Math.round((new Date(e).getUTCFullYear()-new Date(a).getUTCFullYear())/10/r)}return o}return Math.round((e-a)/r)}_getDimensionValuesCount(e){const{extent:t,interval:i,unit:r,values:n}=e;let s=(null==n?void 0:n.length)||0;if(s)return s;const a=t[0];if(0===s&&"ISO8601"===r){var o;switch((null==(o=e.intervalUnit)?void 0:o.toLowerCase())||"seconds"){case"seconds":s=Math.round((t[1]-t[0])/1e3/i);break;case"minutes":s=Math.round((t[1]-t[0])/6e4/i);break;case"hours":s=Math.round((t[1]-t[0])/36e5/i);break;case"days":s=Math.round((t[1]-t[0])/864e5/i);break;case"years":s=Math.round((new Date(t[1]).getUTCFullYear()-new Date(a).getUTCFullYear())/i);break;case"decades":s=Math.round((new Date(t[1]).getUTCFullYear()-new Date(a).getUTCFullYear())/10/i)}return s}return Math.round((t[1]-t[0])/i)}};Object(r.e)([Object(r.y)(o.f)],C.prototype,"url",null),Object(r.e)([Object(r.y)({type:String,json:{write:!0}})],C.prototype,"datasetName",void 0),Object(r.e)([Object(r.y)({type:String,json:{write:!0}})],C.prototype,"datasetFormat",void 0),Object(r.e)([Object(r.y)()],C.prototype,"rasterInfo",void 0),Object(r.e)([Object(r.y)()],C.prototype,"ioConfig",void 0),Object(r.e)([Object(r.y)()],C.prototype,"sourceJSON",void 0),C=Object(r.e)([Object(r.i)("esri.layers.support.rasterDatasets.BaseRaster")],C);var _=C;function M(e){const t=e.fields,i=e.records,r=t.some((e=>"oid"===e.name.toLowerCase()))?"OBJECTID":"OID",n=[{name:r,type:"esriFieldTypeOID",alias:"OID"}].concat(t.map((e=>({name:e.name,type:"esriFieldType"+e.typeName,alias:e.name})))),s=n.map((e=>e.name)),a=[];let o=0,l=0;return i.forEach((e=>{const t={};for(t[r]=o++,l=1;l<s.length;l++)t[s[l]]=e[l-1];a.push({attributes:t})})),{displayFieldName:"",fields:n,features:a}}let k=class extends r.a{constructor(){super(...arguments),this.type="identity"}forwardTransform(e){return e}inverseTransform(e){return e}};Object(r.e)([Object(r.y)({json:{write:!0}})],k.prototype,"spatialReference",void 0),Object(r.e)([Object(r.r)({IdentityXform:"identity"})],k.prototype,"type",void 0),k=Object(r.e)([Object(r.i)("esri.layers.support.rasterTransforms.IdentityTransform")],k);var P=k;function F(e,t,i){const{x:r,y:n}=t;if(i<2)return{x:e[0]+r*e[2]+n*e[4],y:e[1]+r*e[3]+n*e[5]};if(2===i){const t=r*r,i=n*n,s=r*n;return{x:e[0]+r*e[2]+n*e[4]+t*e[6]+s*e[8]+i*e[10],y:e[1]+r*e[3]+n*e[5]+t*e[7]+s*e[9]+i*e[11]}}const s=r*r,a=n*n,o=r*n,l=s*r,c=s*n,u=r*a,f=n*a;return{x:e[0]+r*e[2]+n*e[4]+s*e[6]+o*e[8]+a*e[10]+l*e[12]+c*e[14]+u*e[16]+f*e[18],y:e[1]+r*e[3]+n*e[5]+s*e[7]+o*e[9]+a*e[11]+l*e[13]+c*e[15]+u*e[17]+f*e[19]}}function D(e,t,i){const{xmin:n,ymin:s,xmax:a,ymax:o,spatialReference:l}=t;let c=[];if(i<2)c.push({x:n,y:o}),c.push({x:a,y:o}),c.push({x:n,y:s}),c.push({x:a,y:s});else{let e=10;for(let t=0;t<e;t++)c.push({x:n,y:s+(o-s)*t/(e-1)}),c.push({x:a,y:s+(o-s)*t/(e-1)});e=8;for(let t=1;t<=e;t++)c.push({x:n+(a-n)*t/e,y:s}),c.push({x:n+(a-n)*t/e,y:o})}c=c.map((t=>F(e,t,i)));const u=c.map((e=>e.x)),f=c.map((e=>e.y));return new r.M({xmin:Math.min.apply(null,u),xmax:Math.max.apply(null,u),ymin:Math.min.apply(null,f),ymax:Math.max.apply(null,f),spatialReference:l})}let B=class extends r.a{constructor(){super(...arguments),this.polynomialOrder=1,this.type="polynomial"}readForwardCoefficients(e,t){const{coeffX:i,coeffY:r}=t;if(null==i||!i.length||null==r||!r.length||i.length!==r.length)return null;const n=[];for(let e=0;e<i.length;e++)n.push(i[e]),n.push(r[e]);return n}writeForwardCoefficients(e,t,i){const r=[],n=[];for(let t=0;t<(null==e?void 0:e.length);t++)t%2==0?r.push(e[t]):n.push(e[t]);t.coeffX=r,t.coeffY=n}get inverseCoefficients(){let e=this._get("inverseCoefficients");const t=this._get("forwardCoefficients");return!e&&t&&this.polynomialOrder<2&&(e=function(e){const[t,i,r,n,s,a]=e,o=r*a-s*n,l=s*n-r*a;return[(s*i-t*a)/o,(r*i-t*n)/l,a/o,n/l,-s/o,-r/l]}(t)),e}set inverseCoefficients(e){this._set("inverseCoefficients",e)}readInverseCoefficients(e,t){const{inverseCoeffX:i,inverseCoeffY:r}=t;if(null==i||!i.length||null==r||!r.length||i.length!==r.length)return null;const n=[];for(let e=0;e<i.length;e++)n.push(i[e]),n.push(r[e]);return n}writeInverseCoefficients(e,t,i){const r=[],n=[];for(let t=0;t<(null==e?void 0:e.length);t++)t%2==0?r.push(e[t]):n.push(e[t]);t.inverseCoeffX=r,t.inverseCoeffY=n}forwardTransform(e){if("point"===e.type){const t=F(this.forwardCoefficients,e,this.polynomialOrder);return new r._({x:t.x,y:t.y,spatialReference:e.spatialReference})}return D(this.forwardCoefficients,e,this.polynomialOrder)}inverseTransform(e){if("point"===e.type){const t=F(this.inverseCoefficients,e,this.polynomialOrder);return new r._({x:t.x,y:t.y,spatialReference:e.spatialReference})}return D(this.inverseCoefficients,e,this.polynomialOrder)}};Object(r.e)([Object(r.y)({json:{write:!0}})],B.prototype,"polynomialOrder",void 0),Object(r.e)([Object(r.y)()],B.prototype,"forwardCoefficients",void 0),Object(r.e)([Object(r.a1)("forwardCoefficients",["coeffX","coeffY"])],B.prototype,"readForwardCoefficients",null),Object(r.e)([Object(r.o)("forwardCoefficients")],B.prototype,"writeForwardCoefficients",null),Object(r.e)([Object(r.y)({json:{write:!0}})],B.prototype,"inverseCoefficients",null),Object(r.e)([Object(r.a1)("inverseCoefficients",["inverseCoeffX","inverseCoeffY"])],B.prototype,"readInverseCoefficients",null),Object(r.e)([Object(r.o)("inverseCoefficients")],B.prototype,"writeInverseCoefficients",null),Object(r.e)([Object(r.y)({json:{write:!0}})],B.prototype,"spatialReference",void 0),Object(r.e)([Object(r.r)({PolynomialXform:"polynomial"})],B.prototype,"type",void 0),B=Object(r.e)([Object(r.i)("esri.layers.support.rasterTransforms.PolynomialTransform")],B);var N=B;const H={PolynomialXform:N,IdentityXform:P},z=Object.keys(H);function L(e){const t=null==e?void 0:e.type;return!e||z.includes(t)}const E=new Map;E.set("int16","esriFieldTypeSmallInteger"),E.set("int32","esriFieldTypeInteger"),E.set("int64","esriFieldTypeInteger"),E.set("float32","esriFieldTypeSingle"),E.set("float64","esriFieldTypeDouble"),E.set("text","esriFieldTypeString");let A=class extends _{constructor(){super(...arguments),this.storageInfo=null,this.datasetFormat="CRF"}async open(e){await this.init();const{data:t}=await this.request(this.url+"/conf.json",{signal:null==e?void 0:e.signal});if(!this._validateHeader(t))throw new r.s("cloudraster:open","Invalid or unsupported conf.json.");this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{storageInfo:i,rasterInfo:n}=this._parseHeader(t);if("thematic"===n.dataType){const e=await this._fetchAuxiliaryInformation();n.attributeTable=e}this._set("storageInfo",i),this._set("rasterInfo",n),this.ioConfig.retryCount=this.ioConfig.retryCount||0}async fetchRawTile(e,t,i,r={}){const n=this.rasterInfo.storageInfo.maximumPyramidLevel-e;if(n<0)return null;const s=this._buildCacheFilePath(n,t,i,r.multidimensionalDefinition),a=this._getIndexRecordFromBundle(t,i),o=await this.request(s,{range:{from:0,to:this.storageInfo.headerSize-1},responseType:"array-buffer",signal:r.signal});if(!o)return null;const l=new Uint8Array(o.data),c=this._getTileEndAndContentType(l,a);if(0===c.recordSize)return null;const u=await this.request(s,{range:{from:c.position,to:c.position+c.recordSize},responseType:"array-buffer",signal:r.signal});return u?this.decodePixelBlock(u.data,{width:this.rasterInfo.storageInfo.tileInfo.size[0],height:this.rasterInfo.storageInfo.tileInfo.size[1],planes:null,pixelType:null}):null}_validateHeader(e){return e&&"RasterInfo"===e.type&&!["origin","extent","geodataXform","LODInfos","blockWidth","blockHeight","bandCount","pixelType","pixelSizeX","pixelSizeY","format","packetSize"].some((t=>!e[t]))}_parseHeader(e){var t,i;const n=["u1","u2","u4","u8","s8","u16","s16","u32","s32","f32","f64"][e.pixelType],{bandCount:s,histograms:a,colormap:o,blockWidth:l,blockHeight:c,firstPyramidLevel:u,maximumPyramidLevel:f}=e,h=e.statistics&&e.statistics.map((e=>({min:e.min,max:e.max,avg:e.mean,stddev:e.standardDeviation,median:e.median,mode:e.mode}))),d=e.extent.spatialReference,p=null==(t=e.geodataXform)?void 0:t.spatialReference,m=new r.A(null!=d&&d.wkid||null!=d&&d.wkt?d:p);let g=new r.M({xmin:e.extent.xmin,ymin:e.extent.ymin,xmax:e.extent.xmax,ymax:e.extent.ymax,spatialReference:m});const x=new r._({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:m}),O=Math.round((g.xmax-g.xmin)/x.x),w=Math.round((g.ymax-g.ymin)/x.y),v=this._parseTransform(e.geodataXform),I=v?g:null;v&&(g=v.forwardTransform(g),x.x=(g.xmax-g.xmin)/O,x.y=(g.ymax-g.ymin)/w);const j=null!=(i=e.properties)?i:{},T=e.format.toLowerCase().replace("cache/",""),S=new r._(e.origin.x,e.origin.y,m);let C,_,M,k;if(o&&o.colors)for(C=[],_=0;_<o.colors.length;_++)M=o.colors[_],k=o.values?o.values[_]:_,C.push([k,255&M,M<<16>>>24,M<<8>>>24,M>>>24]);const P=e.LODInfos,F=[];for(_=0;_<P.levels.length;_++)F.push({level:P.levels[_],resolution:P.resolutions[_],scale:96/.0254*P.resolutions[_]});const D=new y.b({dpi:96,lods:F,format:T,origin:S,size:[l,c],spatialReference:m}),B={recordSize:8,packetSize:e.packetSize,headerSize:e.packetSize*e.packetSize*8+64},N=[{maxCol:Math.ceil(O/l)-1,maxRow:Math.ceil(w/c)-1,minCol:0,minRow:0}];let H=2;if(f>0)for(_=0;_<f;_++)N.push({maxCol:Math.ceil(O/H/l)-1,maxRow:Math.ceil(w/H/c)-1,minCol:0,minRow:0}),H*=2;const z=e.mdInfo;return{storageInfo:B,rasterInfo:new b.k({width:O,height:w,pixelType:n,bandCount:s,extent:g,nativeExtent:I,transform:v,spatialReference:m,pixelSize:x,keyProperties:j,statistics:h,histograms:a,multidimensionalInfo:z,colormap:C,storageInfo:new R({blockWidth:l,blockHeight:c,pyramidBlockWidth:l,pyramidBlockHeight:c,origin:S,tileInfo:D,firstPyramidLevel:u,maximumPyramidLevel:f,blockBoundary:N})})}}_parseTransform(e){var t,i;if(!L(e))throw new r.s("cloudraster:open","the data contains unsupported geodata transform types");const n=function(e){if(!(null==e?void 0:e.type))return null;const t=H[null==e?void 0:e.type];if(t){const i=new t;return i.read(e),i}return null}(e);if("identity"===n.type)return null;if(null==(t=n.forwardCoefficients)||!t.length||null==(i=n.inverseCoefficients)||!i.length)throw new r.s("cloudraster:open","the data contains unsupported geodata transforms - both forward and inverse coefficients are required currently");return n}async _fetchAuxiliaryInformation(e){const t=this.request(this.url+"/conf.vat.json",{signal:e}).then((e=>e.data)).catch((()=>null)),i=this.request(this.url+"/conf.vat.dbf",{responseType:"array-buffer",signal:e}).then((e=>e.data)).catch((()=>null)),r=await Promise.all([t,i]);let n;if(r[0]){let e=r[0].fields;const t=r[0].values;if(e&&t){e=e.map((e=>({type:"OID"===e.name?"esriFieldTypeOID":E.get(e.type),name:e.name,alias:e.alias||e.name})));const i=t.map((e=>({attributes:e})));e&&t&&(n={fields:e,features:i})}}return!n&&r[1]&&(n=class{static get supportedVersions(){return[5]}static parse(e){const t=new DataView(e),i=3&t.getUint8(0);if(3!==i)return{header:{version:i},recordSet:null};const r=t.getUint32(4,!0),n=t.getUint16(8,!0),s=t.getUint16(10,!0),a={version:i,recordCount:r,headerByteCount:n,recordByteCount:s};let o=32;const l=[],c=[];let u;if(3===i){for(;13!==t.getUint8(o);)u=String.fromCharCode(t.getUint8(o+11)).trim(),l.push({name:Object(b.l)(new Uint8Array(e,o,11)),type:u,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(u)],length:t.getUint8(o+16)}),o+=32;if(o+=1,l.length>0)for(;c.length<r&&e.byteLength-o>s;){const i=[];32===t.getUint8(o)?(o+=1,l.forEach((t=>{if("C"===t.type)i.push(Object(b.l)(new Uint8Array(e,o,t.length)).trim());else if("N"===t.type)i.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(e,o,t.length)).trim(),10));else if("F"===t.type)i.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(e,o,t.length)).trim()));else if("D"===t.type){const r=String.fromCharCode.apply(null,new Uint8Array(e,o,t.length)).trim();i.push(new Date(parseInt(r.substring(0,4),10),parseInt(r.substring(4,6),10)-1,parseInt(r.substring(6,8),10)))}o+=t.length})),c.push(i)):o+=s}}return{header:a,fields:l,records:c,recordSet:M({fields:l,records:c})}}}.parse(r[1]).recordSet),g.default.fromJSON(n)}_buildCacheFilePath(e,t,i,n){const s=this.storageInfo.packetSize,a=Math.floor(t/s)*s,o=Math.floor(i/s)*s,l="R"+this._toHexString4(a)+"C"+this._toHexString4(o);let c="L";c+=e>=10?e.toString():"0"+e.toString();const{multidimensionalInfo:u}=this.rasterInfo,f=null==n?void 0:n[0];if(!Object(r.P)(u)||!f)return`${this.url}/_alllayers/${c}/${l}.bundle`;let h=u.variables.filter((e=>e.name===f.variableName))[0].dimensions[0].values.indexOf(f.values[0]).toString(16);const d=4-h.length;for(let e=0;e<d;e++)h="0"+h;return h="S"+h,`${this.url}/_alllayers/${f.variableName}/${h}/${c}/${l}.bundle`}_getIndexRecordFromBundle(e,t){const i=this.storageInfo.packetSize,r=i*(e%i)+t%i;if(r<0)throw"Invalid level / row / col";return 20+r*this.storageInfo.recordSize+44}_getTileEndAndContentType(e,t){const i=e.subarray(t,t+8);let r,n=0;for(r=0;r<5;r++)n|=(255&i[r])<<8*r;const s=0xffffffffff&n;for(n=0,r=5;r<8;r++)n|=(255&i[r])<<8*(r-5);return{position:s,recordSize:0xffffffffff&n}}_toHexString4(e){let t=e.toString(16);if(4!==t.length){let e=4-t.length;for(;e-- >0;)t="0"+t}return t}};Object(r.e)([Object(r.y)({readOnly:!0})],A.prototype,"storageInfo",void 0),Object(r.e)([Object(r.y)({type:String,json:{write:!0}})],A.prototype,"datasetFormat",void 0),A=Object(r.e)([Object(r.i)("esri.layers.support.rasterDatasets.CloudRaster")],A);var J=A;let q=class extends _{constructor(){super(...arguments),this.datasetFormat="MEMORY"}async open(e){var t;await this.init();const{pixelBlock:i,statistics:n,histograms:s,name:a,keyProperties:o,nativeExtent:l,transform:c}=this.data,{width:u,height:f,pixelType:h}=i,d=this.data.extent||new r.M({xmin:-.5,ymin:.5,xmax:u-.5,ymax:f-.5,spatialReference:new r.A({wkid:3857})}),p=null!=(t=this.data.isPseudoSpatialReference)?t:!this.data.extent,m={x:d.width/u,y:d.height/f},y=new b.k({width:u,height:f,pixelType:h,extent:d,nativeExtent:l,transform:c,pixelSize:m,spatialReference:d.spatialReference,bandCount:3,keyProperties:o||{},statistics:n,isPseudoSpatialReference:p,histograms:s});this.createRemoteDatasetStorageInfo(y,512,512),this._set("rasterInfo",y),this.updateTileInfo(),await this._buildInMemoryRaster(i,{width:512,height:512},e),this.datasetName=a,this.url="/InMemory/"+a}fetchRawTile(e,t,i,r={}){const n=this._pixelBlockTiles.get(`${e}/${t}/${i}`);return Promise.resolve(n)}async _buildInMemoryRaster(e,t,i){const n=this.rasterInfo.storageInfo.maximumPyramidLevel,s=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:e,tileSize:t,maximumPyramidLevel:n},i):Promise.resolve(Object(x.b)(e,t,n)),a=Object(r.P)(this.rasterInfo.statistics),o=Object(r.P)(this.rasterInfo.histograms),l=a&&o?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:e},i):Promise.resolve(Object(x.n)(e)),c=await Object(r.E)([s,l]);if(!c[0].value&&c[1].value)throw new r.s("inmemory-raster:open","failed to build in memory raster");var u,f;this._pixelBlockTiles=c[0].value,a||(this.rasterInfo.statistics=null==(u=c[1].value)?void 0:u.statistics),o&&(this.rasterInfo.histograms=null==(f=c[1].value)?void 0:f.histograms)}};Object(r.e)([Object(r.y)({type:String,json:{write:!0}})],q.prototype,"datasetFormat",void 0),Object(r.e)([Object(r.y)()],q.prototype,"data",void 0),q=Object(r.e)([Object(r.i)("esri.layers.support.rasterDatasets.InMemoryRaster")],q);var U=q;function W(e,t){if(!e||!t)return[];let i=t;t.indexOf("/")>-1?(i=t.slice(0,t.indexOf("/")),t=t.slice(t.indexOf("/")+1)):t="";const r=[];if(t){const n=W(e,i);for(let e=0;e<n.length;e++)W(n[e],t).forEach((e=>r.push(e)));return r}const n=e.getElementsByTagNameNS("*",i);if(!n||0===n.length)return[];for(let e=0;e<n.length;e++)r.push(n[e]||n.item[e]);return r}function G(e,t){if(!e||!t)return null;let i=t;t.indexOf("/")>-1?(i=t.slice(0,t.indexOf("/")),t=t.slice(t.indexOf("/")+1)):t="";const r=W(e,i);return r.length>0?t?G(r[0],t):r[0]:null}function Y(e,t=null){const i=t?G(e,t):e;let r;return i?(r=i.textContent||i.nodeValue,r?r.trim():null):null}function $(e,t){return function(e,t){const i=W(e,t),r=[];let n;for(let e=0;e<i.length;e++)n=i[e].textContent||i[e].nodeValue,n&&(n=n.trim(),""!==n&&r.push(n));return r}(e,t).map((e=>Number(e)))}function V(e,t){const i=Y(e,t);return Number(i)}function X(e,t){var i;const r=null==e||null==(i=e.nodeName)?void 0:i.toLowerCase(),n=t.toLowerCase();return r.slice(r.lastIndexOf(":")+1)===n}function K(e,t){if(!e||!t)return null;const i=[];for(let r=0;r<e.length;r++)i.push(e[r]),i.push(t[r]);return i}function Q(e){var t;const i=G(e,"GeodataXform"),r=ee(V(i,"SpatialReference/WKID")||Y(i,"SpatialReference/WKT"));if("typens:PolynomialXform"!==i.getAttribute("xsi:type"))return{spatialReference:r,transform:null};const n=null!=(t=V(i,"PolynomialOrder"))?t:1,s=$(i,"CoeffX/Double"),a=$(i,"CoeffY/Double"),o=$(i,"InverseCoeffX/Double"),l=$(i,"InverseCoeffY/Double"),c=K(s,a),u=K(o,l);return{spatialReference:r,transform:new N({spatialReference:r,polynomialOrder:n,forwardCoefficients:c,inverseCoefficients:u})}}function Z(e){var t;const i=V(e,"NoDataValue"),r=G(e,"Histograms/HistItem"),n=V(r,"HistMin"),s=V(r,"HistMax"),a=V(r,"BucketCount"),o=null==(t=Y(r,"HistCounts"))?void 0:t.split("|").map((e=>Number(e)));let l,c,u,f;W(e,"Metadata/MDI").forEach((e=>{var t;const i=Number(null!=(t=e.textContent)?t:e.nodeValue);switch(e.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":l=i;break;case"STATISTICS_MAXIMUM":c=i;break;case"STATISTICS_MEAN":u=i;break;case"STATISTICS_STDDEV":f=i}}));const h=V(e,"Metadata/SourceBandIndex");return{noDataValue:i,histogram:null!=o&&o.length&&null!=l&&null!=c?{min:n,max:s,size:a||o.length,counts:o}:null,sourceBandIndex:h,statistics:null!=l&&null!=c?{min:l,max:c,avg:u,stddev:f}:null}}function ee(e){if(!e)return null;let t=Number(e);if(!isNaN(t)&&0!==t)return new r.A({wkid:t});if(!(e=String(e)).startsWith("GEOGCS")&&!e.startsWith("PROJCS"))return null;const i=e.replace(/\]/g,"[").replace(/\"/g,"").split("[").map((e=>e.trim())).filter((e=>""!==e)),n=i[i.length-1].split(",");return"EPSG"===n[0]&&e.endsWith('"]]')&&(t=Number(n[1]),!isNaN(t)&&0!==t)?new r.A({wkid:t}):new r.A({wkt:e})}function te(e){var t;if("pamdataset"!==(null==e||null==(t=e.documentElement.tagName)?void 0:t.toLowerCase()))return{};const i={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};e.documentElement.childNodes.forEach((e=>{if(1===e.nodeType)if(X(e,"SRS")){if(!i.spatialReference){const t=Y(e);i.spatialReference=ee(t)}}else if(X(e,"Metadata"))if("xml:ESRI"===e.getAttribute("domain")){const{spatialReference:t,transform:r}=Q(e);i.transform=r,i.spatialReference||(i.spatialReference=t)}else W(e,"MDI").forEach((e=>i.metadata[e.getAttribute("key")]=Y(e)));else if(X(e,"PAMRasterBand")){const t=Z(e);null!=t.sourceBandIndex&&null==i.rasterBands[t.sourceBandIndex]?i.rasterBands[t.sourceBandIndex]=t:i.rasterBands.push(t)}}));const r=i.rasterBands;if(r){const e=!!r[0].statistics;i.statistics=e?r.map((e=>e.statistics)):null;const t=!!r[0].histogram;i.histograms=t?r.map((e=>e.histogram)):null}return i}let ie=class extends _{async open(e){await this.init();const t=await this._fetchData(e);let{spatialReference:i,statistics:n,histograms:s,transform:a}=await this._fetchAuxiliaryData(e);const o=!i;o&&(i=new r.A({wkid:3857})),null!=s&&s.length&&null==n&&(n=Object(x.l)(s));const{width:l,height:c}=t;let u=new r.M({xmin:-.5,ymin:.5-c,xmax:l-.5,ymax:.5,spatialReference:i});const f=a?a.forwardTransform(u):u;let h=!0;if(a){const e=a.forwardCoefficients;h=e&&0===e[1]&&0===e[2],h&&(a=null,u=f)}const d=new U({data:{extent:f,nativeExtent:u,transform:a,pixelBlock:t,statistics:n,histograms:s,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:o}});await d.open(),this._set("rasterInfo",d.rasterInfo),this._inMemoryRaster=d}fetchRawTile(e,t,i,r={}){return this._inMemoryRaster.fetchRawTile(e,t,i,r)}async _fetchData(e){const{data:t}=await this.request(this.url,{responseType:"array-buffer",signal:null==e?void 0:e.signal}),i=Object(b.a)(t).toUpperCase();if("JPG"!==i&&"PNG"!==i&&"GIF"!==i&&"BMP"!==i)throw new r.s("image-aux-raster:open","the data is not a supported format");return this._set("datasetFormat",i),await this.decodePixelBlock(t,{format:"jpg",width:1,height:1,useCanvas:!0})}async _fetchAuxiliaryData(e){var t,i;const n=Object(r.Y)(null==e?void 0:e.signal),s=null!=(t=this.ioConfig.skipExtensions)?t:[],a=s.indexOf("aux.xml")>-1?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:n}),o=this.datasetFormat,l="JPG"===o?"jgw":"PNG"===o?"pgw":"BMP"===o?"bpw":null,c=s.indexOf(l)>-1?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+l,{responseType:"text",signal:n}),u=await Object(r.E)([a,c]);if(null!=n&&n.aborted)throw Object(r.ae)();const f=te(null==(i=u[0].value)?void 0:i.data);if(!f.transform){const e=u[1].value?u[1].value.data.split("\n").slice(0,6).map((e=>Number(e))):null;f.transform=6===(null==e?void 0:e.length)?new N({forwardCoefficients:[e[4],e[5],e[0],-e[1],e[2],-e[3]]}):null}return f}};Object(r.e)([Object(r.y)({type:String,json:{write:!0}})],ie.prototype,"datasetFormat",void 0),ie=Object(r.e)([Object(r.i)("esri.layers.support.rasterDatasets.ImageAuxRaster")],ie);var re=ie;let ne=class extends _{constructor(){super(...arguments),this._levelOffset=0,this._slices=null,this._tilemapCache=null,this.datasetFormat="RasterTileServer"}async open(e){await this.init();const t=e&&e.signal,i=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:t});i.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const n=i.data;if(this.sourceJSON=n,!n)throw new r.s("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!n.tileInfo)throw new r.s("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo();this.tileType=n.cacheType,null==this.tileType&&(["jpg","jpeg","png","png8","png24","png32","mixed"].indexOf(n.tileInfo.format.toLowerCase())>-1?this.tileType="Map":"lerc"===n.tileInfo.format.toLowerCase()?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=n.name.slice(n.name.indexOf("/")+1);const s=await this._fetchRasterInfo({signal:t});if(!Object(r.P)(s))throw new r.s("image-server-raster:open","cannot initialize image service");{const e="Map"===this.tileType?Object(v.a)(n.tileInfo,n):y.b.fromJSON(n.tileInfo),{extent:t,pixelSize:i}=s,r=.5/s.width*i.x;let a,o;const l=e.lodAt(Math.max.apply(null,e.lods.map((e=>e.level))));"Map"!==this.tileType&&0!==n.maxScale&&("Raster"===this.tileType?(a=e.lods.filter((e=>e.resolution===i.x))[0],a||(a=e.lods[e.lods.length-1])):(a=e.lods.filter((e=>Math.abs(e.scale-n.maxScale)<r))[0],a||(a=e.lods.filter((e=>e.scale>n.maxScale)).sort(((e,t)=>e.scale>t.scale?1:-1))[0])),i.x=i.y=a.resolution,s.width=Math.ceil((t.xmax-t.xmin)/i.x-.1),s.height=Math.ceil((t.ymax-t.ymin)/i.y-.1)),a||(a=l);const c=e.lodAt(Math.min.apply(null,e.lods.map((e=>e.level))));"Map"===this.tileType?this._levelOffset=e.lods[0].level:0!==n.minScale&&"Elevation"===this.tileType&&(o=e.lods.filter((e=>Math.abs(e.scale-n.minScale)<r))[0],this._levelOffset=o.level-c.level),o||(o=c);const u=Math.max(i.x,i.y);(Math.abs(i.x-i.y)>r||!e.lods.some((e=>Math.abs(e.resolution-u)<r)))&&(i.x=i.y=a.resolution,s.width=Math.ceil((t.xmax-t.xmin)/i.x-.1),s.height=Math.ceil((t.ymax-t.ymin)/i.y-.1));const f=a.level-o.level,[h,d]=e.size,p=e.origin;let{x:m,y:b}=i;const g=[{minCol:Math.floor((t.xmin-p.x+.1*m)/h/m),maxCol:Math.floor((t.xmax-p.x-.1*m)/h/m),minRow:Math.floor((p.y-t.ymax+.1*b)/d/b),maxRow:Math.floor((p.y-t.ymin-.1*b)/d/b)}];if(f>0)for(let e=0;e<f;e++)m*=2,b*=2,g.push({minCol:Math.floor((t.xmin-p.x+.1*m)/h/m),maxCol:Math.floor((t.xmax-p.x-.1*m)/h/m),minRow:Math.floor((p.y-t.ymax+.1*b)/d/m),maxRow:Math.floor((p.y-t.ymin-.1*b)/d/m)});s.storageInfo=new R({blockWidth:e.size[0],blockHeight:e.size[1],pyramidBlockWidth:e.size[0],pyramidBlockHeight:e.size[1],compression:e.format,origin:e.origin,firstPyramidLevel:1,maximumPyramidLevel:f,tileInfo:e,blockBoundary:g}),this._set("rasterInfo",s)}if(n.capabilities.toLowerCase().indexOf("tilemap")>-1){const e={tileInfo:s.storageInfo.tileInfo,parsedUrl:Object(r.U)(this.url),url:this.url,tileServers:[],type:"tile"};this._tilemapCache=new I.a({layer:e})}}async fetchRawTile(e,t,i,r={}){const{storageInfo:n,extent:s,pixelSize:a}=this.rasterInfo,o=n.maximumPyramidLevel-e+this._levelOffset,l=`${this.url}/tile/${o}/${t}/${i}`,c=this._slices?{sliceId:r.sliceId||0}:null,{data:u}=await this.request(l,{query:c,responseType:"array-buffer",signal:r.signal});if(!u)return null;const f=await this.decodePixelBlock(u,{width:n.tileInfo.size[0],height:n.tileInfo.size[1],planes:null,pixelType:null,isPoint:"Elevation"===this.tileType}),h=n.blockBoundary[e];if("jpg"!==n.compression||i>h.minCol&&i<h.maxCol&&t>h.minRow&&t<h.maxRow)return f;const{origin:d,blockWidth:p,blockHeight:m}=n,y=2**e,b=Math.round((s.xmin-d.x)/(a.x*y))%p,g=Math.round((s.xmax-d.x)/(a.x*y))%p,O=Math.round((d.y-s.ymax)/(a.x*y))%m,w=Math.round((d.y-s.ymin)/(a.x*y))%m,v=i===h.minCol?b:0,I=t===h.minRow?O:0,j=i===h.maxCol?g:p,T=t===h.maxRow?w:m;return Object(x.e)(f,{x:v,y:I},{width:j-v,height:T-I}),f}getSliceIndex(e){if(null==e||!e.length||!this._slices)return null;const t=e;for(let e=0;e<this._slices.length;e++){const i=this._slices[e].multidimensionalDefinition;if(i.length===t.length&&!i.some((e=>{const i=t.filter((t=>e.variableName===t.variableName&&t.dimensionName===e.dimensionName))[0];return!i||(Array.isArray(e.values[0])?e.values[0][0]:e.values[0])!==(Array.isArray(i.values[0])?i.values[0][0]:i.values[0])})))return e}return null}async fetchVariableStatisticsHistograms(e,t){const i=this.request(this.url+"/statistics",{query:{variable:e,f:"json"},signal:t}).then((e=>{var t;return null==(t=e.data)?void 0:t.statistics})),r=this.request(this.url+"/histograms",{query:{variable:e,f:"json"},signal:t}).then((e=>{var t;return null==(t=e.data)?void 0:t.histograms})),n=await Promise.all([i,r]);return n[0]&&n[0].forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation})),{statistics:n[0]||null,histograms:n[1]||null}}async computeBestPyramidLevelForLocation(e,t={}){if(!this._tilemapCache)return 0;let i=this.identifyPixelLocation(e,0,Object(r.Y)(t.datumTransformation));if(null===i)return null;let n=0;const{maximumPyramidLevel:s}=this.rasterInfo.storageInfo;let a=s-n+this._levelOffset;const o=i.srcLocation;for(;a>=0;){try{if("available"===await this._tilemapCache.fetchAvailability(a,i.row,i.col,t))break}catch{}if(a--,n++,i=this.identifyPixelLocation(o,n,Object(r.Y)(t.datumTransformation)),null===i)return null}return-1===a||null==i?null:n}async _fetchRasterInfo(e){const t=this.sourceJSON,i=Math.ceil((t.extent.xmax-t.extent.xmin)/t.pixelSizeX-.1),n=Math.ceil((t.extent.ymax-t.extent.ymin)/t.pixelSizeY-.1),s=r.A.fromJSON(t.spatialReference||t.extent.spatialReference);if("Map"===this.tileType)return new b.k({width:i,height:n,bandCount:3,extent:r.M.fromJSON(t.extent),spatialReference:s,pixelSize:new r._({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:s}),pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}});const{slice:a,signal:o}=e,l=!!t.hasRasterAttributeTable&&this.request(this.url+"/rasterAttributeTable",{query:{slice:a,f:"json"},signal:o}).then((e=>g.default.fromJSON(e.data))).catch((()=>null)),c=!!t.hasColormap&&this.request(this.url+"/colormap",{query:{slice:a,f:"json"},signal:o}).then((e=>{var t;return null==(t=e.data)?void 0:t.colormap})),u=!!t.hasHistograms&&this.request(this.url+"/histograms",{query:{slice:a,f:"json"},signal:o}).then((e=>{var t;return null==(t=e.data)?void 0:t.histograms})),f=this.request(this.url+"/keyProperties",{query:{f:"json"},signal:o}).then((e=>e.data)).catch((()=>{})),h=!!t.hasMultidimensions&&this._fetchMultidimensionalInfo(),d=!!t.hasMultidimensions&&this.request(this.url+"/slices",{query:{f:"json"},signal:o}).then((e=>e.data&&e.data.slices)).catch((()=>{}));return Promise.all([l,c,u,f,h,d]).then((e=>{let a=null;if(t.minValues&&t.minValues.length===t.bandCount){a=[];for(let e=0;e<t.minValues.length;e++)a.push({min:t.minValues[e],max:t.maxValues[e],avg:t.meanValues[e],stddev:t.stdvValues[e]})}return this._slices=e[5]||null,new b.k({width:i,height:n,bandCount:t.bandCount,extent:r.M.fromJSON(t.extent),spatialReference:s,pixelSize:new r._({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:s}),pixelType:t.pixelType.toLowerCase(),statistics:a,attributeTable:e[0]||null,colormap:e[1]||null,histograms:e[2]||null,keyProperties:e[3]||{},multidimensionalInfo:e[4]||null})}))}async _fetchMultidimensionalInfo(e){var t;const i=await this.request(this.url+"/multidimensionalInfo",{query:{f:"json"},signal:e}).then((e=>{var t;return null==(t=e.data)?void 0:t.multidimensionalInfo}));return null!=(t=i.variables)&&t.length&&i.variables.forEach((e=>{var t;null!=(t=e.statistics)&&t.length&&e.statistics.forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation}))})),i}_fixScaleInServiceInfo(){const{sourceJSON:e}=this;e.minScale&&e.minScale<0&&(e.minScale=0),e.maxScale&&e.maxScale<0&&(e.maxScale=0)}};Object(r.e)([Object(r.y)({type:String,json:{write:!0}})],ne.prototype,"datasetFormat",void 0),Object(r.e)([Object(r.y)()],ne.prototype,"tileType",void 0),ne=Object(r.e)([Object(r.i)("esri.layers.support.rasterDatasets.ImageServerRaster")],ne);var se=ne;const ae=new Map;ae.set("Int8","s8"),ae.set("UInt8","u8"),ae.set("Int16","s16"),ae.set("UInt16","u16"),ae.set("Int32","s32"),ae.set("UInt32","u32"),ae.set("Float32","f32"),ae.set("Float64","f32"),ae.set("Double64","f32");const oe=new Map;oe.set("lerc",".lrc"),oe.set("none",".til"),oe.set("deflate",".pzp"),oe.set("jpeg",".jzp");let le=class extends _{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async open(e){var t;await this.init(),this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const i=e?Object(r.Y)(e.signal):null,n=await this.request(this.url,{responseType:"xml",signal:i}),{rasterInfo:s,files:a}=this._parseHeader(n.data);if(-1===(null==(t=this.ioConfig.skipExtensions)?void 0:t.indexOf("aux.xml"))){const t=await this._fetchAuxiliaryData(e);var o;null!=t&&(s.statistics=null!=(o=t.statistics)?o:s.statistics,s.histograms=t.histograms,t.histograms&&!Object(r.P)(s.statistics)&&(s.statistics=Object(x.l)(t.histograms)))}this._set("rasterInfo",s),this._files=a;const l=await this.request(a.index,{responseType:"array-buffer",signal:i});this._storageIndex=this._parseIndex(l.data);let c,u,f=0,h=-1;const{blockWidth:d,blockHeight:p,compression:m}=this.rasterInfo.storageInfo,y=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:b,height:g,bandCount:O}=this.rasterInfo,w=[],v="none"===m?1:O;for(;f<this._storageIndex.length;)h++,c=Math.ceil(b/d/y**h),u=Math.ceil(g/p/y**h),f+=c*u*v*4,w.push({maxRow:u,maxCol:c,minCol:0,minRow:0});this.rasterInfo.storageInfo.blockBoundary=w,h>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=h),this.updateTileInfo()}async fetchRawTile(e,t,i,r={}){const{blockWidth:n,blockHeight:s,blockBoundary:a,compression:o}=this.rasterInfo.storageInfo,l=a[e];if(!l||l.maxRow<t||l.maxCol<i||l.minRow>t||l.minCol>i)return null;const{bandCount:c,pixelType:u}=this.rasterInfo,{ranges:f,actualTileWidth:h,actualTileHeight:d}=this._getTileLocation(e,t,i);if(!f||0===f.length)return null;if(0===f[0].from&&0===f[0].to){const e=new Uint8Array(n*s);return new x.p({width:n,height:s,pixels:null,mask:e,validPixelCount:0})}const{bandIds:p}=this.ioConfig,m="none"===o?1:c,y=[];let b=0;for(b=0;b<m;b++)(!p||p.indexOf[b]>-1)&&y.push(this.request(this._files.data,{range:{from:f[b].from,to:f[b].to},responseType:"array-buffer",signal:r.signal}));const g=await Promise.all(y),O=g.map((e=>e.data.byteLength)).reduce(((e,t)=>e+t)),w=new Uint8Array(O);let v=0;for(b=0;b<m;b++)w.set(new Uint8Array(g[b].data),v),v+=g[b].data.byteLength;const I="lerc"===this.rasterInfo.storageInfo.compression?"lerc":"bip",j=await this.decodePixelBlock(w.buffer,{width:n,height:s,format:I,pixelType:u});let T=0,S=0;if(h!==n||d!==s){let e=j.mask;if(e)for(b=0;b<s;b++)if(S=b*n,b<d)for(T=h;T<n;T++)e[S+T]=0;else for(T=0;T<n;T++)e[S+T]=0;else for(e=new Uint8Array(n*s),j.mask=e,b=0;b<d;b++)for(S=b*n,T=0;T<h;T++)e[S+T]=1}return j}_parseIndex(e){if(e.byteLength%16>0)throw"invalid array buffer must be multiples of 16";let t,i,r,n,s,a;if(b.e){for(i=new Uint8Array(e),n=new ArrayBuffer(e.byteLength),r=new Uint8Array(n),s=0;s<e.byteLength/4;s++)for(a=0;a<4;a++)r[4*s+a]=i[4*s+3-a];t=new Uint32Array(n)}else t=new Uint32Array(e);return t}_getTileLocation(e,t,i){const{blockWidth:r,blockHeight:n,pyramidScalingFactor:s,compression:a}=this.rasterInfo.storageInfo,{width:o,height:l,bandCount:c}=this.rasterInfo,u="none"===a?1:c;let f,h,d,p=0,m=0;for(d=0;d<e;d++)m=s**d,f=Math.ceil(o/r/m),h=Math.ceil(l/n/m),p+=f*h;m=s**e,f=Math.ceil(o/r/m),h=Math.ceil(l/n/m),p+=t*f+i,p*=4*u;const y=this._storageIndex.subarray(p,p+4*u);let b=0,g=0;const x=[];for(let e=0;e<u;e++)b=y[4*e+0]*2**32+y[4*e+1],g=b+y[4*e+2]*2**32+y[4*e+3],x.push({from:b,to:g});return{ranges:x,actualTileWidth:i<f-1?r:Math.ceil(o/m)-r*(f-1),actualTileHeight:t<h-1?n:Math.ceil(l/m)-n*(h-1)}}_parseHeader(e){const t=G(e,"MRF_META/Raster");if(!t)throw new r.s("mrf:open","not a valid MRF format");const i=G(t,"Size"),n=parseInt(i.getAttribute("x"),10),s=parseInt(i.getAttribute("y"),10),a=parseInt(i.getAttribute("c"),10),o=(Y(t,"Compression")||"none").toLowerCase();if(!o||-1===["none","lerc"].indexOf(o))throw new r.s("mrf:open","currently does not support compression "+o);const l=Y(t,"DataType")||"UInt8",c=ae.get(l);if(null==c)throw new r.s("mrf:open","currently does not support pixel type "+l);const u=G(t,"PageSize"),f=parseInt(u.getAttribute("x"),10),h=parseInt(u.getAttribute("y"),10),d=G(t,"DataValues");let p,m;if(d&&(m=d.getAttribute("NoData"),null!=m&&(p=m.trim().split(" ").map((e=>parseFloat(e))))),G(e,"MRF_META/CachedSource"))throw new r.s("mrf:open","currently does not support MRF referencing other data files");const y=G(e,"MRF_META/GeoTags"),g=G(y,"BoundingBox");if(null==g)throw new r.s("mrf:open","missing node MRF_META/GeoTags/BoundingBox");const x=parseFloat(g.getAttribute("minx")),O=parseFloat(g.getAttribute("miny")),w=parseFloat(g.getAttribute("maxx")),v=parseFloat(g.getAttribute("maxy")),I=Y(y,"Projection")||"",j=Y(e,"datafile"),T=Y(e,"IndexFile");let S;if("LOCAL_CS[]"!==I)if(I.toLowerCase().startsWith("epsg:")){const e=Number(I.slice(5));isNaN(e)||0===e||(S=new r.A({wkid:e}))}else S=ee(I);const C=new r.M(x,O,w,v);C.spatialReference=S;const _=G(e,"MRF_META/Rsets"),M=parseInt(_&&_.getAttribute("scale")||"2",10),k=new R({origin:new r._({x:C.xmin,y:C.ymax,spatialReference:S}),blockWidth:f,blockHeight:h,pyramidBlockWidth:f,pyramidBlockHeight:h,compression:o,pyramidScalingFactor:M}),P=new r._({x:(w-x)/n,y:(v-O)/s,spatialReference:S});return{rasterInfo:new b.k({width:n,height:s,extent:C,spatialReference:S,bandCount:a,pixelType:c,pixelSize:P,noDataValue:p,storageInfo:k}),files:{mrf:this.url,index:T||this.url.replace(".mrf",".idx"),data:j||this.url.replace(".mrf",oe.get(o))}}}async _fetchAuxiliaryData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:null==e?void 0:e.signal});return te(t)}catch{return null}}};Object(r.e)([Object(r.y)()],le.prototype,"_files",void 0),Object(r.e)([Object(r.y)()],le.prototype,"_storageIndex",void 0),Object(r.e)([Object(r.y)({type:String,json:{write:!0}})],le.prototype,"datasetFormat",void 0),le=Object(r.e)([Object(r.i)("esri.layers.support.rasterIO.MRFRaster")],le);var ce=le;const ue=function(e,t){const i=e.get(t);return i&&i.values},fe=function(e,t){const i=e.get(t);return i&&i.values[0]};let he=class extends _{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF"}async open(e){var t;await this.init();const i=e?Object(r.Y)(e.signal):null,{data:n}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:i});if(!n)throw new r.s("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{littleEndian:s,firstIFD:a,isBigTiff:o}=Object(b.f)(n),l=[];await this.readIFDs(l,n,s,a,0,o?8:4,i);const c=Object(b.n)(l),{width:u,height:f,tileWidth:h,tileHeight:d,planes:p,pixelType:m,compression:y,firstPyramidLevel:g,maximumPyramidLevel:O,pyramidBlockWidth:w,pyramidBlockHeight:v,tileBoundary:I,affine:j,metadata:T}=c,S=r.M.fromJSON(c.extent),C=S.spatialReference,_=new r._(S?{x:S.xmin,y:S.ymax,spatialReference:C}:{x:0,y:0}),M=new R({blockWidth:h,blockHeight:d,pyramidBlockWidth:w,pyramidBlockHeight:v,compression:y,origin:_,firstPyramidLevel:g,maximumPyramidLevel:O,blockBoundary:I}),k=new r._({x:(S.xmax-S.xmin)/u,y:(S.ymax-S.ymin)/f,spatialReference:C}),P=T?{BandProperties:T.bandProperties,DataType:T.dataType}:{},F=new b.k({width:u,height:f,bandCount:p,pixelType:m,compression:y,pixelSize:k,storageInfo:M,spatialReference:C,keyProperties:P,extent:S,statistics:T?T.statistics:null});if(null!=j&&j.length&&(F.nativeExtent=new r.M({xmin:-.5,ymin:.5-f,xmax:u-.5,ymax:.5,spatialReference:C}),F.transform=new N({polynomialOrder:1,forwardCoefficients:[j[2]+j[0]/2,j[5]-j[3]/2,j[0],j[3],-j[1],-j[4]]}),F.extent=F.transform.forwardTransform(F.nativeExtent),F.pixelSize=new r._({x:(S.xmax-S.xmin)/u,y:(S.ymax-S.ymin)/f,spatialReference:C}),M.origin.x=-.5,M.origin.y=.5),null==(t=this.ioConfig.skipExtensions)||!t.includes("aux.xml")){const t=await this._fetchAuxiliaryData(e);if(null!=t){var D;if(F.statistics=null!=(D=t.statistics)?D:F.statistics,F.histograms=t.histograms,t.histograms&&!Object(r.P)(F.statistics)&&(F.statistics=Object(x.l)(t.histograms)),t.transform&&!j){F.transform=t.transform,F.nativeExtent=F.extent;const e=F.transform.forwardTransform(F.nativeExtent);F.pixelSize=new r._({x:(e.xmax-e.xmin)/u,y:(e.ymax-e.ymin)/f,spatialReference:C}),F.extent=e}F.spatialReference||(F.spatialReference=t.spatialReference)}}if(this._set("rasterInfo",F),this._headerInfo={littleEndian:s,isBigTiff:o,ifds:l,...c},!this._headerInfo.isSupported)throw new r.s("tiffraster:open","this tiff is not supported: "+this._headerInfo.message);this.updateTileInfo()}async fetchRawTile(e,t,i,r={}){var n;if(null==(n=this._headerInfo)||!n.isSupported||this.isBlockOutside(e,t,i))return null;const s=this.getTileLocation(e,t,i);if(!s)return null;const{range:a,actualTileWidth:o,actualTileHeight:l,ifd:c}=s,{data:u}=await this.request(this.url,{range:a,responseType:"array-buffer",signal:r.signal}),{blockWidth:f,blockHeight:h}=this.getBlockWidthHeight(e),d=await this.decodePixelBlock(u,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:c,offset:0,size:0},width:f,height:h,planes:null,pixelType:null});let p,m,y;if(o!==f||l!==h){let e=d.mask;if(e)for(p=0;p<h;p++)if(y=p*f,p<l)for(m=o;m<f;m++)e[y+m]=0;else for(m=0;m<f;m++)e[y+m]=0;else for(e=new Uint8Array(f*h),d.mask=e,p=0;p<l;p++)for(y=p*f,m=0;m<o;m++)e[y+m]=1}return d}async readIFDs(e,t,i,r,n,s=4,a){if(!r)return null;(r>=t.byteLength||r<0)&&(t=(await this.request(this.url,{range:{from:r+n,to:r+n+this._bufferSize},responseType:"array-buffer",signal:a})).data,n=r+n,r=0);const o=await this.readIFD(t,i,r,n,b.g.TIFF_TAGS,s,a);if(e.push(o.ifd),!o.nextIFD)return null;await this.readIFDs(e,t,i,o.nextIFD-n,n,s,a)}async readIFD(e,t,i,r,n=b.g.TIFF_TAGS,s=4,a){if(!e)return null;const o=Object(b.m)(e,t,i,r,n,s);if(o.success){const i=[];if(o.ifd.forEach((e=>{e.values||i.push(e)})),i.length>0){const n=i.map((e=>e.offlineOffsetSize)),s=Math.min.apply(null,n.map((e=>e[0])));if(Math.min.apply(null,n.map((e=>e[0]+e[1])))-s<=this._bufferSize){const{data:n}=await this.request(this.url,{range:{from:s,to:s+this._bufferSize},responseType:"array-buffer",signal:a});e=n,r=s,i.forEach((i=>Object(b.b)(e,t,i,r)))}}if(o.ifd.has("GEOKEYDIRECTORY")){const i=o.ifd.get("GEOKEYDIRECTORY"),n=i.values;if(n&&n.length>4){const s=n[0]+"."+n[1]+"."+n[2],o=await this.readIFD(e,t,i.valueOffset+6-r,r,b.g.GEO_KEYS,2,a);i.data=o.ifd,i.data&&i.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[s]})}}return o}if(o.requiredBufferSize&&o.requiredBufferSize!==e.byteLength){const i=await this.request(this.url,{range:{from:r,to:r+o.requiredBufferSize+4},responseType:"array-buffer",signal:a});return(e=i.data).byteLength<o.requiredBufferSize?null:this.readIFD(e,t,0,r,b.g.TIFF_TAGS,4,a)}}getTileLocation(e,t,i){const{firstPyramidLevel:r,blockBoundary:n}=this.rasterInfo.storageInfo,s=0===e?0:e-(r-1),a=this._headerInfo.ifds[s];if(!a)return null;const o=ue(a,"TILEOFFSETS");if(void 0===o)return null;const l=ue(a,"TILEBYTECOUNTS"),{minRow:c,minCol:u,maxRow:f,maxCol:h}=n[s];if(t>f||i>h||t<c||i<u)return null;const d=fe(a,"IMAGEWIDTH"),p=fe(a,"IMAGELENGTH"),m=fe(a,"TILEWIDTH"),y=fe(a,"TILELENGTH"),b=t*(h+1)+i,g=o[b],x=l[b];return null==g||null==x?null:{range:{from:g,to:g+x-1},ifd:a,actualTileWidth:i===h?d%m:m,actualTileHeight:t===f?p%y:y}}async _fetchAuxiliaryData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:null==e?void 0:e.signal});return te(t)}catch{return null}}};Object(r.e)([Object(r.y)()],he.prototype,"_files",void 0),Object(r.e)([Object(r.y)()],he.prototype,"_headerInfo",void 0),Object(r.e)([Object(r.y)()],he.prototype,"_bufferSize",void 0),Object(r.e)([Object(r.y)({type:String,json:{write:!0}})],he.prototype,"datasetFormat",void 0),he=Object(r.e)([Object(r.i)("esri.layers.support.rasterDatasets.TIFFRaster")],he);var de=he;const pe=new Map;pe.set("CRF",{desc:"Cloud Raster Format",constructor:J}),pe.set("MRF",{desc:"Meta Raster Format",constructor:ce}),pe.set("TIFF",{desc:"GeoTIFF",constructor:de}),pe.set("RasterTileServer",{desc:"Raster Tile Server",constructor:se}),pe.set("JPG",{desc:"JPG Raster Format",constructor:re}),pe.set("PNG",{desc:"PNG Raster Format",constructor:re}),pe.set("GIF",{desc:"GIF Raster Format",constructor:re}),pe.set("BMP",{desc:"BMP Raster Format",constructor:re});const me=Object(r.aL)()({RSP_NearestNeighbor:"nearest",RSP_BilinearInterpolation:"bilinear",RSP_CubicConvolution:"cubic",RSP_Majority:"majority"});function ye(){return{enabled:!this.loaded||"RasterTileServer"===this.raster.datasetFormat&&"Raster"===this.raster.tileType}}let be=class extends(Object(u.a)(Object(d.a)(Object(h.a)(Object(o.i)(Object(f.a)(T(Object(a.b)(s.a)))))))){constructor(...e){super(...e),this.bandIds=null,this.interpolation=null,this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.title=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const t=Object(r.P)(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},e).then((()=>this._openRaster(t)),(()=>this._openRaster(t)))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get fields(){var e,t;let i=[new c.a({name:"Raster.ServicePixelValue",alias:"Pixel Value",domain:null,editable:!1,length:50,type:"string"})];const r=null==(e=this.rasterInfo)||null==(t=e.attributeTable)?void 0:t.fields;if(r){const e=r.filter((e=>"oid"!==e.type&&"value"!==e.name.toLowerCase())).map((e=>{const t=e.clone();return t.name="Raster."+e.name,t}));i=i.concat(e)}return i}set renderer(e){this._set("renderer",e),this.updateRenderer()}readRenderer(e,t,i){const r=t&&t.layerDefinition&&t.layerDefinition.drawingInfo&&t.layerDefinition.drawingInfo.renderer,n=Object(l.k)(r,i)||void 0;if(null!=n)return n}createPopupTemplate(e){return Object(p.a)(this,e)}write(e,t){const{raster:i}=this;if(this.loaded?"RasterTileServer"===i.datasetFormat&&("Raster"===i.tileType||"Map"===i.tileType):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(e,t);if(t&&t.messages){const e=`${t.origin}/${t.layerContainerType||"operational-layers"}`;t.messages.push(new r.s("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${e}'`,{layer:this}))}return null}async _openRaster(e){this.raster?(this.raster.rasterInfo||await this.raster.open(),this.url=this.raster.url):this.raster=await class{static get supportedFormats(){const e=new Set;return pe.forEach(((t,i)=>e.add(i))),e}static async open(e){const{url:t,ioConfig:i,sourceJSON:n}=e;let s=e.datasetFormat;null==s&&t.lastIndexOf(".")&&(s=t.slice(t.lastIndexOf(".")+1).toUpperCase()),"OVR"===s||"TIF"===s?s="TIFF":"JPG"!==s&&"JPEG"!==s&&"JFIF"!==s||(s="JPG"),t.toLowerCase().indexOf("/imageserver")>-1&&-1===t.toLowerCase().indexOf("/wcsserver")&&(s="RasterTileServer");const a={url:t,sourceJSON:n,datasetFormat:s,ioConfig:i||{bandIds:null,sampling:null}};let o,l;if(this.supportedFormats.has(s))return o=pe.get(s).constructor,l=new o(a),await l.open({signal:e.signal}),l;if(s)throw new r.s("rasterfactory:open","not a supported format "+s);const c=Array.from(pe.keys());let u=0;const f=function(){return s=c[u++],s?(o=pe.get(s).constructor,l=new o(a),l.open({signal:e.signal}).then((()=>l)).catch((()=>f()))):null};return f()}static register(e,t,i){pe.has(e.toUpperCase())||pe.set(e.toUpperCase(),{desc:t,constructor:i})}}.open({url:this.url,sourceJSON:this.sourceJSON,ioConfig:this.ioConfig,signal:e});const{rasterInfo:t}=this.raster;if(!t)throw new r.s("imagery-tile-layer:load","cannot load resources on "+this.url);this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,null!=this.sourceJSON&&(this._set("version",this.sourceJSON.currentVersion),this._set("copyright",this.sourceJSON.copyrightText)),null==this.title&&(this.title=this.raster.datasetName),"Map"===this.raster.tileType&&(this.popupEnabled=!1),this._configDefaultSettings()}};Object(r.e)([Object(r.y)({type:[r.N],json:{write:{overridePolicy:ye}}})],be.prototype,"bandIds",void 0),Object(r.e)([Object(r.y)({json:{write:{overridePolicy:ye}}}),Object(r.r)(me)],be.prototype,"interpolation",void 0),Object(r.e)([Object(r.y)({json:{write:!0}})],be.prototype,"multidimensionalDefinition",void 0),Object(r.e)([Object(r.y)(o.e)],be.prototype,"legendEnabled",void 0),Object(r.e)([Object(r.y)({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],be.prototype,"isReference",void 0),Object(r.e)([Object(r.y)({type:["show","hide"]})],be.prototype,"listMode",void 0),Object(r.e)([Object(r.y)()],be.prototype,"sourceJSON",void 0),Object(r.e)([Object(r.y)({readOnly:!0})],be.prototype,"version",void 0),Object(r.e)([Object(r.y)()],be.prototype,"title",void 0),Object(r.e)([Object(r.y)({readOnly:!0,json:{read:!1}})],be.prototype,"type",void 0),Object(r.e)([Object(r.y)({type:["ArcGISTiledImageServiceLayer"]})],be.prototype,"operationalLayerType",void 0),Object(r.e)([Object(r.y)({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(e,t)=>!t.disablePopup},write:{target:"disablePopup",overridePolicy:ye,writer(e,t,i){t[i]=!e}}}})],be.prototype,"popupEnabled",void 0),Object(r.e)([Object(r.y)({type:n.a,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy:ye}}})],be.prototype,"popupTemplate",void 0),Object(r.e)([Object(r.y)({readOnly:!0})],be.prototype,"defaultPopupTemplate",null),Object(r.e)([Object(r.y)({readOnly:!0,type:[c.a]})],be.prototype,"fields",null),Object(r.e)([Object(r.y)({types:l.f,json:{name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:ye},origins:{"web-scene":{types:l.g,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&"vector-field"!==e.type})}}}}})],be.prototype,"renderer",null),Object(r.e)([Object(r.a1)("renderer")],be.prototype,"readRenderer",null),be=Object(r.e)([Object(r.i)("esri.layers.ImageryTileLayer")],be);var ge=be;t.default=ge}}]);