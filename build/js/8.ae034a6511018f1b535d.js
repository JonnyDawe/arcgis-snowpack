(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{223:function(e,t,r){"use strict";r.r(t);r(18);var n=r(0),s=(r(1),r(12)),i=r(162),c=r(9);r(102);let a=class extends s.c{constructor(e){super(e),this.url=null}areasAndLengths(e,t){return async function(e,t,r){const i=Object(s.d)(e),c={...i.query,f:"json",...t.toJSON()},a=Object(s.a)(c,r);return Object(n.C)(i.path+"/areasAndLengths",a).then((e=>e.data))}(this.url,e,t)}autoComplete(e,t,r){return async function(e,t,r,c){const a=t[0].spatialReference,o=Object(s.d)(e),N={...o.query,f:"json",sr:JSON.stringify(a.toJSON()),polygons:JSON.stringify(Object(i.n)(t).geometries),polylines:JSON.stringify(Object(i.n)(r).geometries)},O=Object(s.a)(N,c);return Object(n.C)(o.path+"/autoComplete",O).then((({data:e})=>(e.geometries||[]).map((({rings:e})=>new n.au({spatialReference:a,rings:e})))))}(this.url,e,t,r)}buffer(e,t){return async function(e,t,r){const i=Object(s.d)(e),c={...i.query,f:"json",...t.toJSON()},a=t.outSpatialReference||t.geometries[0].spatialReference,o=Object(s.a)(c,r);return Object(n.C)(i.path+"/buffer",o).then((e=>(e.data.geometries||[]).map((({rings:e})=>new n.au({spatialReference:a,rings:e})))))}(this.url,e,t)}convexHull(e,t){return async function(e,t,r){const a=t[0].spatialReference,o=Object(s.d)(e),N={...o.query,f:"json",sr:JSON.stringify(a.toJSON()),geometries:JSON.stringify(Object(i.n)(t))},O=Object(s.a)(N,r);return Object(n.C)(o.path+"/convexHull",O).then((({data:e})=>Object(c.e)(e.geometry).set({spatialReference:a})))}(this.url,e,t)}cut(e,t,r){return async function(e,t,r,i){const a=Object(s.d)(e),o=t[0].spatialReference,N={...i,query:{...a.query,f:"json",sr:JSON.stringify(o),target:JSON.stringify({geometryType:Object(c.b)(t[0]),geometries:t}),cutter:JSON.stringify(r)}},O=await Object(n.C)(a.path+"/cut",N),{cutIndexes:I,geometries:_=[]}=O.data;return{cutIndexes:I,geometries:_.map((e=>{const t=Object(c.e)(e);return t.spatialReference=o,t}))}}(this.url,e,t,r)}densify(e,t){return async function(e,t,r){const i=t.geometries[0].spatialReference,a=Object(s.d)(e),o={...a.query,f:"json",...t.toJSON()},N=Object(s.a)(o,r);return Object(n.C)(a.path+"/densify",N).then((({data:e})=>(e.geometries||[]).map((e=>Object(c.e)(e).set({spatialReference:i})))))}(this.url,e,t)}difference(e,t,r){return async function(e,t,r,a){const o=t[0].spatialReference,N=Object(s.d)(e);let O={query:{...N.query,f:"json",sr:JSON.stringify(o.toJSON()),geometries:JSON.stringify(Object(i.n)(t)),geometry:JSON.stringify({geometryType:Object(c.b)(r),geometry:r.toJSON()})}};return a&&(O={...a,...O}),Object(n.C)(N.path+"/difference",O).then((({data:e})=>(e.geometries||[]).map((e=>Object(c.e)(e).set({spatialReference:o})))))}(this.url,e,t,r)}distance(e,t){return async function(e,t,r){const i=Object(s.d)(e),c={...i.query,f:"json",...t.toJSON()},a=Object(s.a)(c,r);return Object(n.C)(i.path+"/distance",a).then((({data:e})=>e&&e.distance))}(this.url,e,t)}fromGeoCoordinateString(e,t){return async function(e,t,r){const c={};null!=t.sr&&"object"==typeof t.sr?c.sr=t.sr.wkid||JSON.stringify(t.sr):c.sr=t.sr,c.strings=JSON.stringify(t.strings);const a=t.conversionType||"mgrs";c.conversionType=i.a.toJSON(a),c.conversionMode=t.conversionMode;const o=Object(s.d)(e),N={...o.query,f:"json",...c},O=Object(s.a)(N,r);return Object(n.C)(o.path+"/fromGeoCoordinateString",O).then((({data:e})=>e.coordinates))}(this.url,e,t)}generalize(e,t){return async function(e,t,r){const a=(t=i.k.from(t)).toJSON(),o=Object(i.b)(t),N=Object(s.d)(e),O={...N.query,f:"json",...o},I=a.geometries[0].spatialReference,_=Object(s.a)(O,r);return Object(n.C)(N.path+"/generalize",_).then((({data:e})=>(e.geometries||[]).map((e=>Object(c.e)(e).set({spatialReference:I})))))}(this.url,e,t)}intersect(e,t,r){return async function(e,t,r,a){const o=t[0].spatialReference,N=Object(s.d)(e),O={...N.query,f:"json",sr:JSON.stringify(o.toJSON()),geometries:JSON.stringify(Object(i.n)(t)),geometry:JSON.stringify({geometryType:Object(c.b)(r),geometry:r.toJSON()})},I=Object(s.a)(O,a);return Object(n.C)(N.path+"/intersect",I).then((({data:e})=>(e.geometries||[]).map((e=>Object(c.e)(e).set({spatialReference:o})))))}(this.url,e,t,r)}labelPoints(e,t){return function(e,t,r){const i=t.map((e=>e.toJSON())),a=t[0].spatialReference,o=Object(s.d)(e),N={...o.query,f:"json",sr:a.wkid?a.wkid:JSON.stringify(a.toJSON()),polygons:JSON.stringify(i)},O=Object(s.a)(N,r);return Object(n.C)(o.path+"/labelPoints",O).then((({data:e})=>(e.labelPoints||[]).map((e=>Object(c.e)(e).set({spatialReference:a})))))}(this.url,e,t)}lengths(e,t){return async function(e,t,r){t=i.c.from(t);const c=Object(i.m)(t),a=Object(s.d)(e),o={...a.query,f:"json",...c},N=Object(s.a)(o,r);return Object(n.C)(a.path+"/lengths",N).then((({data:e})=>e))}(this.url,e,t)}offset(e,t){return async function(e,t,r){t=i.d.from(t);const a=Object(i.e)(t),o=Object(s.d)(e),N={...o.query,f:"json",...a},O=t.geometries[0].spatialReference,I=Object(s.a)(N,r);return Object(n.C)(o.path+"/offset",I).then((({data:e})=>(e.geometries||[]).map((e=>Object(c.e)(e).set({spatialReference:O})))))}(this.url,e,t)}project(e,t){return Object(i.l)(this.url,e,t)}relation(e,t){return async function(e,t,r){t=i.f.from(t);const c=Object(i.g)(t),a=Object(s.d)(e),o={...a.query,f:"json",...c},N=Object(s.a)(o,r);return Object(n.C)(a.path+"/relation",N).then((({data:e})=>e.relations))}(this.url,e,t)}reshape(e,t,r){return async function(e,t,r,i){const a=t.spatialReference,o=Object(s.d)(e),N={...o.query,f:"json",sr:JSON.stringify(a.toJSON()),target:JSON.stringify({geometryType:Object(c.b)(t),geometry:t.toJSON()}),reshaper:JSON.stringify(r.toJSON())},O=Object(s.a)(N,i);return Object(n.C)(o.path+"/reshape",O).then((({data:e})=>Object(c.e)(e.geometry).set({spatialReference:a})))}(this.url,e,t,r)}simplify(e,t){return async function(e,t,r){const s="string"==typeof e?Object(n.U)(e):e,a=t[0].spatialReference,o=Object(c.b)(t[0]),N={...r,query:{...s.query,f:"json",sr:a.wkid?a.wkid:JSON.stringify(a),geometries:JSON.stringify(Object(i.n)(t))}},{data:O}=await Object(n.C)(s.path+"/simplify",N);return Object(i.h)(O.geometries,o,a)}(this.url,e,t)}toGeoCoordinateString(e,t){return async function(e,t,r){const c={};null!=t.sr&&"object"==typeof t.sr?c.sr=t.sr.wkid||JSON.stringify(t.sr):c.sr=t.sr,c.coordinates=JSON.stringify(t.coordinates);const a=t.conversionType||"mgrs";c.conversionType=i.a.toJSON(a),c.conversionMode=t.conversionMode,c.numOfDigits=t.numOfDigits,c.rounding=t.rounding,c.addSpaces=t.addSpaces;const o=Object(s.d)(e),N={...o.query,f:"json",...c},O=Object(s.a)(N,r);return Object(n.C)(o.path+"/toGeoCoordinateString",O).then((({data:e})=>e.strings))}(this.url,e,t)}trimExtend(e,t){return async function(e,t,r){t=i.i.from(t);const c=Object(i.j)(t),a=Object(s.d)(e),o={...a.query,f:"json",...c},N=t.sr,O=Object(s.a)(o,r);return Object(n.C)(a.path+"/trimExtend",O).then((({data:e})=>(e.geometries||[]).map((({paths:e})=>new n.aJ({spatialReference:N,paths:e})))))}(this.url,e,t)}union(e,t){return async function(e,t,r){const a=t[0].spatialReference,o=Object(s.d)(e),N={...o.query,f:"json",sr:JSON.stringify(a.toJSON()),geometries:JSON.stringify(Object(i.n)(t))},O=Object(s.a)(N,r);return Object(n.C)(o.path+"/union",O).then((({data:e})=>Object(c.e)(e.geometry).set({spatialReference:a})))}(this.url,e,t)}};a.UNIT_METER=9001,a.UNIT_GERMAN_METER=9031,a.UNIT_FOOT=9002,a.UNIT_SURVEY_FOOT=9003,a.UNIT_CLARKE_FOOT=9005,a.UNIT_FATHOM=9014,a.UNIT_NAUTICAL_MILE=9030,a.UNIT_SURVEY_CHAIN=9033,a.UNIT_SURVEY_LINK=9034,a.UNIT_SURVEY_MILE=9035,a.UNIT_KILOMETER=9036,a.UNIT_CLARKE_YARD=9037,a.UNIT_CLARKE_CHAIN=9038,a.UNIT_CLARKE_LINK=9039,a.UNIT_SEARS_YARD=9040,a.UNIT_SEARS_FOOT=9041,a.UNIT_SEARS_CHAIN=9042,a.UNIT_SEARS_LINK=9043,a.UNIT_BENOIT_1895A_YARD=9050,a.UNIT_BENOIT_1895A_FOOT=9051,a.UNIT_BENOIT_1895A_CHAIN=9052,a.UNIT_BENOIT_1895A_LINK=9053,a.UNIT_BENOIT_1895B_YARD=9060,a.UNIT_BENOIT_1895B_FOOT=9061,a.UNIT_BENOIT_1895B_CHAIN=9062,a.UNIT_BENOIT_1895B_LINK=9063,a.UNIT_INDIAN_FOOT=9080,a.UNIT_INDIAN_1937_FOOT=9081,a.UNIT_INDIAN_1962_FOOT=9082,a.UNIT_INDIAN_1975_FOOT=9083,a.UNIT_INDIAN_YARD=9084,a.UNIT_INDIAN_1937_YARD=9085,a.UNIT_INDIAN_1962_YARD=9086,a.UNIT_INDIAN_1975_YARD=9087,a.UNIT_FOOT_1865=9070,a.UNIT_RADIAN=9101,a.UNIT_DEGREE=9102,a.UNIT_ARCMINUTE=9103,a.UNIT_ARCSECOND=9104,a.UNIT_GRAD=9105,a.UNIT_GON=9106,a.UNIT_MICRORADIAN=9109,a.UNIT_ARCMINUTE_CENTESIMAL=9112,a.UNIT_ARCSECOND_CENTESIMAL=9113,a.UNIT_MIL6400=9114,a.UNIT_BRITISH_1936_FOOT=9095,a.UNIT_GOLDCOAST_FOOT=9094,a.UNIT_INTERNATIONAL_CHAIN=109003,a.UNIT_INTERNATIONAL_LINK=109004,a.UNIT_INTERNATIONAL_YARD=109001,a.UNIT_STATUTE_MILE=9093,a.UNIT_SURVEY_YARD=109002,a.UNIT_50KILOMETER_LENGTH=109030,a.UNIT_150KILOMETER_LENGTH=109031,a.UNIT_DECIMETER=109005,a.UNIT_CENTIMETER=109006,a.UNIT_MILLIMETER=109007,a.UNIT_INTERNATIONAL_INCH=109008,a.UNIT_US_SURVEY_INCH=109009,a.UNIT_INTERNATIONAL_ROD=109010,a.UNIT_US_SURVEY_ROD=109011,a.UNIT_US_NAUTICAL_MILE=109012,a.UNIT_UK_NAUTICAL_MILE=109013,a.UNIT_SQUARE_INCHES="esriSquareInches",a.UNIT_SQUARE_FEET="esriSquareFeet",a.UNIT_SQUARE_YARDS="esriSquareYards",a.UNIT_ACRES="esriAcres",a.UNIT_SQUARE_MILES="esriSquareMiles",a.UNIT_SQUARE_MILLIMETERS="esriSquareMillimeters",a.UNIT_SQUARE_CENTIMETERS="esriSquareCentimeters",a.UNIT_SQUARE_DECIMETERS="esriSquareDecimeters",a.UNIT_SQUARE_METERS="esriSquareMeters",a.UNIT_ARES="esriAres",a.UNIT_HECTARES="esriHectares",a.UNIT_SQUARE_KILOMETERS="esriSquareKilometers",Object(n.e)([Object(n.y)()],a.prototype,"url",void 0),a=Object(n.e)([Object(n.i)("esri.tasks.GeometryService")],a);var o=a;t.default=o}}]);