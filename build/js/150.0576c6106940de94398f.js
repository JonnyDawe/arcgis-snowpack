(window.webpackJsonp=window.webpackJsonp||[]).push([[150],{276:function(e,r,n){"use strict";n.r(r),n.d(r,"create",(function(){return o})),n.d(r,"projectGeometry",(function(){return a}));var t=n(1),i=n(0),l=n(102);n(9);async function o(e=null,r){if(t.l.geometryServiceUrl)return new((await n.e(8).then(n.bind(null,223))).default)({url:t.l.geometryServiceUrl});if(!e)throw new i.s("internal:geometry-service-url-not-configured");let l;if(l="portal"in e?e.portal||i.aT.getDefault():e,await l.load({signal:r}),l.helperServices&&l.helperServices.geometry&&l.helperServices.geometry.url)return new((await n.e(8).then(n.bind(null,223))).default)({url:l.helperServices.geometry.url});throw new i.s("internal:geometry-service-url-not-configured")}async function a(e,r,n=null,t){const a=await o(n,t),c=new l.a;c.geometries=[e],c.outSpatialReference=r;const u=await a.project(c,{signal:t});if(u&&Array.isArray(u)&&1===u.length)return u[0];throw new i.s("internal:geometry-service-projection-failed")}}}]);